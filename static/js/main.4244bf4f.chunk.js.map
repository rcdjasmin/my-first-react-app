{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","Counter","props","this","counter","tags","length","map","tag","key","children","src","cover","album","onClick","onDecrement","setBadgeClasses","formatCount","onIncrement","onDelete","id","classes","value","Component","Counters","counters","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4244bf4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst NavBar = ({totalCounters}) => {\n    return (\n        <nav className=\"navbar\">\n            <h1>Your cart</h1>\n            <span className=\"total-items--container\">\n                <span className=\"total-items\">{totalCounters}</span>\n            </span>\n\n        </nav>\n     );\n};\n\n\nexport default NavBar;","import React, { Component } from 'react';\nclass Counter extends Component {\n\n    /*state = {\n        value: this.props.counter.value,\n        tags: ['tag1', 'tag2', 'tag3']\n    };*/\n    constructor(props) {\n        super(props);\n        /*this.handleIncrement = this.handleIncrement.bind(this);*/\n    };\n    renderTags() {\n        /*conditional rendering*/\n        if(this.props.counter.tags.length === 0) return <p>There are no tags</p>;\n        /*rendering a list from an array*/\n        return <ul>{this.props.counter.tags.map(tag=><li key={tag}> { tag } </li>)}</ul>;\n    };\n    /*updating state\n    handleIncrement() {\n\n        this.setState({\n            value: this.state.value + 1\n        });\n    };*/\n\n    render() {\n        return (\n            <div className=\"counter\">\n                {this.props.children}\n                <div className=\"album-cover-container\">\n                    <img className=\"album-cover\" src={this.props.counter.cover}/>\n                </div>\n                <div className=\"album-title-container\">\n                    <h3>{this.props.counter.album}</h3>\n                </div>\n                <div className=\"buttons-container\">\n                    <button className=\"btn-default btn-minus\"\n                            onClick = {() => this.props.onDecrement(this.props.counter)}>-</button>\n                    <span className={this.setBadgeClasses()}>{this.formatCount()}</span>\n                    {/* handling events\n                    <button onClick={ this.handleIncrement }>Increment</button>\n                    */}\n                    <button className=\"btn-default btn-add\"\n                            onClick = {() => this.props.onIncrement(this.props.counter)}>+</button>\n                    {/*raising event*/}\n                    <button className=\"btn-delete\"\n                            onClick={ () => this.props.onDelete(this.props.counter.id) }>x</button>\n                {/*{this.renderTags()}*/}\n               </div>\n            </div>\n        );\n    }\n    setBadgeClasses() {\n        let classes = \"badge badge-\";\n        classes += (this.props.counter.value === 0) ? \"empty\" : \"default\";\n        return classes;\n    }\n\n    formatCount() {\n        const { value } = this.props.counter;\n        return value === 0 ? ':(' : value;\n    }\n}\n\nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\n    /*\n    pass data\n    raise and handle events\n    multiple components in sync\n    functional components\n    lifecycle hooks\n    */\nclass Counters extends Component {\n\n    render() {\n        /*\n        to make code cleaner, add:\n        const { onReset, counters, onDelete, onIncrement } = this.props;\n        then remove 'this.props' from below\n        */\n        return ( <div>\n           {/* <button onClick={this.props.onReset}>Reset</button> */}\n        {this.props.counters.map(counter =>\n        <Counter key={counter.id}\n                 onDelete={this.props.onDelete}/*raising and handling events*/\n                 onIncrement={this.props.onIncrement}\n                 onDecrement={this.props.onDecrement}\n                 counter={counter}>\n            {/*<h4>Counter #{counter.id}</h4>*/}\n        </Counter>\n        /*\n            passing data using props (see value = counter.value)\n            passing children (see h4 within counter)\n            <Counter key={counter.id}\n                     onDelete={this.handleDelete}\n                     id={counter.id}\n                     value={counter.value}>\n\n                <h4>Counter #{counter.id}</h4>\n            </Counter>\n        */\n\n        )}\n        </div> );\n    }\n}\n\nexport default Counters;","import React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport Counters from './components/counters';\n\nclass App extends Component {\n    state = {\n        counters: [\n            { id: 1,\n              value: 1,\n              album: \"Be A Cowboy\",\n              cover: \"https://upload.wikimedia.org/wikipedia/en/thumb/f/f3/Be_the_Cowboy.jpg/220px-Be_the_Cowboy.jpg\"\n            },\n            { id: 2,\n              value: 1,\n              album: \"A Brief Inquiry Into Online Relationships\",\n              cover: \"https://prodimage.images-bn.com/pimages/0602577011443_p0_v2_s550x406.jpg\"\n            },\n            { id: 3,\n              value: 1,\n              album: \"Heard It In A Past Life\",\n              cover: \"https://upload.wikimedia.org/wikipedia/en/thumb/6/6a/HIIAPL_Maggie_Rogers.jpg/220px-HIIAPL_Maggie_Rogers.jpg\"\n            }\n        ]\n     };\n\n    handleIncrement = counter => {\n        const counters = [...this.state.counters];\n        const index = counters.indexOf(counter);\n        counters[index] = { ...counter };\n        counters[index].value++;\n        this.setState({ counters });\n    };\n    handleDecrement = counter => {\n        const counters = [...this.state.counters];\n        const index = counters.indexOf(counter);\n        counters[index] = { ...counter };\n        if(counters[index].value > 0) {\n            counters[index].value--;\n        }\n        this.setState({ counters });\n    };\n    handleReset = () => {\n        const counters = this.state.counters.map(c => {\n            c.value = 0;\n            return c;\n        });\n        this.setState({ counters });\n    };\n\n    handleDelete = (counterId) => {\n        const counters = this.state.counters.filter(c => c.id !== counterId);\n        this.setState({ counters });\n    };\n\n    render() {\n        return (\n           <React.Fragment>\n               <div className=\"nav-container\">\n                <Navbar totalCounters={this.state.counters.filter(c=> c.value>0).length}/>\n                <button className=\"reset-btn\" onClick={this.handleReset}>Reset</button>\n               </div>\n               <hr className=\"horizontal-rule\"/>\n               <main className=\"container\">\n               <Counters counters={this.state.counters}\n                         onIncrement={this.handleIncrement}\n                         onDecrement={this.handleDecrement}\n                         onDelete={this.handleDelete}/>\n                </main>\n           </React.Fragment>\n         );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\nimport Counters from './components/counters';\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();"],"sourceRoot":""}